import random
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ==== –ö–ù–û–ü–ö–ò ====
admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add(KeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª"))

# ==== –§–£–ù–ö–¶–ò–ò ====
def generate_fake_signal():
    entry_point = round(random.uniform(1.20, 1.80), 2)
    exit_point = round(entry_point + random.uniform(0.20, 0.60), 2)
    delay = random.randint(10, 60)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)
    return f"üöÄ *–°–∏–≥–Ω–∞–ª –†–∞–∫–µ—Ç–∞ 1win!*\n\\nüïê –ß–µ—Ä–µ–∑: {delay} —Å–µ–∫—É–Ω–¥\\nüéØ –í—Ö–æ–¥ –¥–æ: {entry_point}x\\nüèÅ –í—ã—Ö–æ–¥ –¥–æ: {exit_point}x\\n\\n–£–¥–∞—á–∏! üçÄ"

# ==== –•–ï–ù–î–õ–ï–†–´ ====
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=admin_keyboard)
    else:
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

@dp.message_handler(commands=['signal'])
async def cmd_signal(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    signal = generate_fake_signal()
    await message.answer(signal, parse_mode="Markdown")

@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard)

@dp.message_handler(lambda message: message.text == "üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
async def generate_signal_button(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        signal = generate_fake_signal()
        await message.answer(signal, parse_mode="Markdown")

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)